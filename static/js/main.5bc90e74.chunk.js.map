{"version":3,"sources":["logo.svg","components/nav.js","components/Header.js","components/screen/Home.js","components/screen/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","hello","e","alert","Navigation","className","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","src","logo","alt","Toggle","aria-controls","Collapse","id","Nav","Link","to","onClick","NavDropdown","title","Item","Divider","eventKey","withRouter","location","Home","About","App","path","component","Header","exact","React","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,kC,0SCYrCC,G,kBAAQ,SAACC,GAEXC,MAAM,mBA+EKC,MAzDf,WAEI,OACJ,yBAAKC,UAAU,QACP,kBAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,QAGnD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SACf,yBAAKC,IAAKC,IAAMT,UAAU,eAAeU,IAAI,SADjD,UAKA,kBAACT,EAAA,EAAOU,OAAR,CAAeC,gBAAc,0BAE7B,kBAACX,EAAA,EAAOY,SAAR,CAAiBC,GAAG,yBAChB,kBAACC,EAAA,EAAD,CAAKf,UAAU,WACX,kBAACe,EAAA,EAAIC,KAAL,CAAUT,KAAK,SAAf,QACA,kBAACQ,EAAA,EAAIC,KAAL,CAAUT,KAAK,UAAf,UACA,kBAACQ,EAAA,EAAIC,KAAL,CAAUhB,UAAU,WAAWiB,GAAG,UAAlC,UAIA,kBAAC,IAAD,CAAMjB,UAAU,WAAWiB,GAAG,QAAQC,QAAStB,GAA/C,SACA,kBAAC,IAAD,CAAMI,UAAU,WAAWiB,GAAG,UAA9B,UAEA,kBAACF,EAAA,EAAIC,KAAL,CAAUT,KAAK,YAAf,WAEA,kBAACY,EAAA,EAAD,CAAaC,MAAM,WAAWN,GAAG,2BAC7B,kBAACK,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,UACA,kBAACY,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,kBACA,kBAACY,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,aACA,kBAACY,EAAA,EAAYG,QAAb,MACA,kBAACH,EAAA,EAAYE,KAAb,CAAkBd,KAAK,eAAvB,oBAKR,kBAACQ,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUT,KAAK,UAAf,cACA,kBAACQ,EAAA,EAAIC,KAAL,CAAUO,SAAU,EAAGhB,KAAK,UAA5B,mBC9DLiB,eARA,SAAC,GAAiB,EAAfC,SAChB,OACM,6BACI,kBAAC,EAAD,UCEGC,EARF,WACX,OACE,6BACE,sCCKSC,EARD,WACZ,OACE,6BACE,uCC4DSC,G,6KAtBP,OACI,yBAAK5B,UAAU,OAEX,kBAAC,IAAD,KACI,6BACI,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,UAAWC,IAE3B,yBAAK/B,UAAU,WACX,kBAAC,IAAD,CAAOgC,OAAK,EAACH,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,QAAQC,UAAWJ,IAC/B,kBAAC,IAAD,CAAOG,KAAK,SAASC,UAAWH,Y,GAd1CM,IAAMC,YC3BJC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bc90e74.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, Nav, NavDropdown } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './nav.css';\r\n\r\nimport $ from 'jquery';\r\n\r\nimport { DiReact } from \"react-icons/di\";\r\n\r\nimport logo from '../logo.svg';\r\n\r\nconst hello = (e) => {\r\n    \r\n    alert('시바6');\r\n    \r\n    //$(\".navbar-toggler\").attr('class','navbar-toggler collapsed');  //notice란 클래스명으로 찾아서 클래스명을 notice ab으로 변경\r\n    //$(\".navbar-toggler-icon\").attr('class','navbar-toggler-icon');\r\n    //document.getElementById(\"responsive-navbar-nav\").className = \"navbar-collapse collapse\";\r\n    \r\n    \r\n\r\n    //document.getElementById(\"responsive-navbar-nav\")[0].click();\r\n    //$(\".navbar-toggler\").attr('data-toggle','collapse');\r\n\r\n\r\n    //$('.navbar-toggler').click();\r\n}\r\n\r\nfunction Story({ className, story }) {\r\n    if (story.isLoading) {\r\n      return null; // This shouldn't cause a warning but seems like it would?\r\n    }\r\n    return <div className={className} />;\r\n}\r\n\r\nfunction Navigation() {\r\n\r\n    return (\r\n<div className=\"test\">\r\n        <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n            {/*  <img src={logo} className=\"App-logo-nav\" alt=\"logo\" />  */}\r\n           \r\n            <Navbar.Brand href=\"/Home\">\r\n                <img src={logo} className=\"App-logo-nav\" alt=\"logo\" />\r\n                Navbar\r\n            </Navbar.Brand>\r\n            \r\n            <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n            \r\n            <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n                <Nav className=\"mr-auto\">\r\n                    <Nav.Link href=\"#Home\">Home</Nav.Link>\r\n                    <Nav.Link href=\"/About\">About1</Nav.Link>\r\n                    <Nav.Link className=\"nav-link\" to=\"/About\">About2</Nav.Link>\r\n\r\n                    \r\n                    \r\n                    <Link className=\"nav-link\" to='/home' onClick={hello}>home3</Link>\r\n                    <Link className=\"nav-link\" to='/about'>About3</Link>\r\n\r\n                    <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\r\n\r\n                    <NavDropdown title=\"Dropdown\" id=\"collasible-nav-dropdown\">\r\n                        <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.2\">Another action</NavDropdown.Item>\r\n                        <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\r\n                        <NavDropdown.Divider />\r\n                        <NavDropdown.Item href=\"#action/3.4\">Separated link</NavDropdown.Item>\r\n                    </NavDropdown>\r\n                    \r\n                </Nav>\r\n\r\n                <Nav>\r\n                    <Nav.Link href=\"#deets\">More deets</Nav.Link>\r\n                    <Nav.Link eventKey={2} href=\"#memes\">\r\n                        Dank memes\r\n                    </Nav.Link>\r\n                </Nav>\r\n\r\n                {/*\r\n                <Form inline>\r\n                    <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\r\n                    <Button variant=\"outline-info\">Search</Button>\r\n                </Form>\r\n                */}\r\n            </Navbar.Collapse>\r\n            \r\n        </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router';\r\n\r\nimport Navigation from './nav'\r\n\r\nconst Header = ({ location }) => {\r\n  return (\r\n        <div>\r\n            <Navigation />\r\n        </div>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div>\r\n      <h1>Home</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\n\r\nconst About = () => {\r\n  return (\r\n    <div>\r\n      <h1>About</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Home from './components/screen/Home';\nimport About from './components/screen/About';\nimport Photo from './components/screen/Photo';\n\n{/* \nfunction App() {\n  return (\n    <div className=\"App\">\n\n      \n        <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n            Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            Learn React\n        </a>\n        </header>\n        \n\n    </div>\n  );\n}\n*/}\n\n\nclass App extends React.Component {\n\n    render() {\n\n        return (\n            <div className=\"App\">\n                \n                <Router>\n                    <div>\n                        <Route path='/' component={Header} />\n                        \n                        <div className=\"Screens\">\n                            <Route exact path=\"/\" component={Home} />\n                            <Route path=\"/home\" component={Home} />\n                            <Route path=\"/about\" component={About} />\n                        </div>\n                        \n                    </div>\n                </Router>\n                \n            </div>\n            \n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}